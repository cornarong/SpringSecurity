
## 인증 개념 이해
1) Authentication (인증 주체)
. 당신이 누구인지 증명하는 것
. 사용자의 인증정보를 저장하는 토큰 개념
. 인증 시 id와 password 를 담고 인증검증을 위해 전달되어서 사용된다.
. 인증 후 최종 인증결과 (user 객체, 권한정보)를 담고 SecurityContext 에 저장되어 전역적으로 참조가 가능하다.
    * Authentication authentication = SecurityContextHolder.getContext().getAuthentication()
. Interface 구조
    1) principal : 사용자 아이디 혹은 User 객체를 저장
    2) credentials : 사용자 비밀번호
    3) authorities : 인증된 사용자의 권한 목록
    4) details : 인증 부가 정보 (추가적인 인증작업을 할 수 있음)
    5) Authenticated : 인증 여부

## 인증 저장소
1) SecurityContext (SecurityContext > Authentication > UserInfo)
. Authentication 객체가 저장되는 '보관소' 로 필요시 언제든지 Authentication 객체를 꺼내어 쓸 수 있도록 제공되는 클래스이다.
. ThreadLocal 에 저장되어 '아무 곳에서나 참조가 가능' 하도록 설계되어 있다.
    + ThreadLocal 이란? : 각각의 스레드마다 고유하게 할당된 저장소이다. 스레드끼리 공유가 되지않기 떄문에 안전하다.
                        -> '각각의 스레드에 SecurityContext 가 저장된다.'
. 인증이 완료되면 HttpSession 에 저장되어 어플리케이션 전반에 걸쳐 전역적인 참조가 가능하다.

2) SecurityContextHolder (SecurityContext 를 감싸고 있는 클래스)
. SecurityContext 객체 저장 방식 3가지
    . MODE_THREADLOCAL : 스레드당 SecurityContext 객체를 할당한다. (기본값)
    . MODE_INHERITABLETHREADLOCAL : 메인(부모) 스레드와 자식 스레드에 관하여 동일한 SecurityContext 를 유지한다.
    . MODE_GLOBAL : 응용 프로그램에서 단 하나의 SecurityContext 를 저장한다. (static 변수 한곳에 저장해서 사용한다.)
. SecurityContextHolder.clearContext() : SecurityContext 기존 정보 초기화

-> 인증된 사용자의 객체 사용 시 : Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

## 인증 저장소 필터
1) SecurityContextPersistenceFilter
. SecurityContext 객체를 생성, 저장, 조회하는 역할의 필터
    . 익명 사용자
        . 새로운 Authentication 객체를 생성하여 SecurityContextHolder 에 저장
        . AnonymousAuthenticationFilter 에서 AnonymousAuthenticationToken 객체를 SecurityContext 에 저장
    . 인증 시
        . 새로운 Authentication 객체를 생성하여 SecurityContextHolder 에 저장
        . UsernamePasswordAuthenticationFilter 에서 인증 성공 후 UsernamePasswordAuthenticationToken 객체를
          SecurityContext 에 저장
        . 인증이 최종 완료되면 Session 에 SecurityContext 를 저장 (이제 부터 세션에서 바로 꺼내 확인할 수 있음)
    . 인증 후
        . Session 에서 SecurityContext 꺼내어 SecurityContextHolder 에서 저장
        . SecurityContext 안에 Authentication 객체가 존재하면 계속 인증을 유지
    . 최종 응답 시 공통
        . SecurityContextHolder.clearContext() (인증 사용자는 이미 세션에 SecurityContext 가 저장되어 있기 떄문에 상관 없음)

